#!/usr/bin/env Rscript

#--------------------------------------------------------------------------------
# Load packages I need (and install if missing)
#--------------------------------------------------------------------------------

# List of libraries needed
libraries <- c("gdsfmt", "SNPRelate", "ggplot2", "ggpubr", "reshape2")

# Loop to check if packages are installed; if not, install them
for (lib in libraries) {
  if (require(package = lib, character.only = TRUE)) {
    print(paste0("Loaded '", lib, "'"))
  } else {
    print(paste0("'", lib, "' not installed. Trying to install..."))
    if (!requireNamespace("BiocManager", quietly = TRUE)) {
      install.packages("BiocManager")
    }
    if (lib %in% c("gdsfmt", "SNPRelate")) {
      BiocManager::install(lib, suppressUpdates = TRUE, ask = FALSE)
    } else {
      install.packages(lib, dependencies = TRUE)
    }
    library(lib, character.only = TRUE)
    print(paste0("Installed and loaded '", lib, "'"))
  }
}

# Create a results folder (just in case I want to save general output here)
dir.create("results", showWarnings = FALSE)

#--------------------------------------------------------------------------------
# Get parameters from the command line (set in the SLURM script)
#--------------------------------------------------------------------------------

args <- commandArgs(TRUE)

# Arguments I'm expecting:
input          <- args[1]  # VCF file path
slide_max      <- args[3]  # LD pruning: max base pairs per sliding window
slide_snp      <- args[4]  # LD pruning: max SNPs per window
ld_threshold   <- args[5]  # LD pruning: RÂ² threshold
output_job_dir <- args[6]  # Folder where I want to store this run's results
exclude_samples_file_path <- args[7]  # File with sample IDs I want to exclude
job_run_name_R <- args[8]  # Just a custom name for this PCA run (shows up in outputs)

# Convert numbers from character
slide_max <- as.numeric(slide_max)
slide_snp <- as.numeric(slide_snp)
ld_threshold <- as.numeric(ld_threshold)

#--------------------------------------------------------------------------------
# Create output directory (unique for each run)
#--------------------------------------------------------------------------------

dir.create(output_job_dir, recursive = TRUE, showWarnings = FALSE)
print(paste0("Saving all outputs for this run to: ", output_job_dir))

#--------------------------------------------------------------------------------
# Convert VCF to GDS format (this makes the data easier to work with)
#--------------------------------------------------------------------------------

input_vcf <- input
gds_file_name <- gsub(".vcf.gz$", ".gds", basename(input_vcf))  # Replace extension
input_vcf_gds <- file.path(output_job_dir, gds_file_name)

# Convert to GDS
tryCatch({
  snpgdsVCF2GDS(input_vcf, input_vcf_gds, method = "biallelic.only")
  print("Converted VCF to GDS.")
}, error = function(e) {
  stop(paste("VCF to GDS conversion failed:", e$message))
})

# Open GDS file for analysis
tryCatch({
  input_vcf_gds_genofile <- snpgdsOpen(input_vcf_gds)
  print("Opened GDS file successfully.")
}, error = function(e) {
  stop(paste("Couldn't open GDS file:", e$message))
})

#--------------------------------------------------------------------------------
# Exclude samples (if I provided a list)
#--------------------------------------------------------------------------------

all_gds_sample_ids <- read.gdsn(index.gdsn(input_vcf_gds_genofile, "sample.id"))
selected_sample_ids <- all_gds_sample_ids

# If I have an exclusion file, remove those samples
if (!is.na(exclude_samples_file_path) && exclude_samples_file_path != "NONE") {
  if (file.exists(exclude_samples_file_path)) {
    excluded_samples <- readLines(exclude_samples_file_path)
    excluded_samples <- excluded_samples[nchar(excluded_samples) > 0]
    initial_count <- length(selected_sample_ids)
    selected_sample_ids <- setdiff(selected_sample_ids, excluded_samples)
    excluded_count <- initial_count - length(selected_sample_ids)
    print(paste0("Excluded ", excluded_count, " samples"))
    
    if (excluded_count > 0) {
      print(paste0("Samples excluded: ", paste(setdiff(all_gds_sample_ids, selected_sample_ids), collapse = ", ")))
    }

    if (length(selected_sample_ids) == 0) {
      stop("All samples were excluded. Can't do PCA.")
    }
  } else {
    warning(paste0("Couldn't find exclusion file: ", exclude_samples_file_path, ". Keeping all samples."))
  }
} else {
  print("No exclusion file provided. Keeping all samples.")
}

#--------------------------------------------------------------------------------
# LD Pruning (to remove correlated SNPs before PCA)
#--------------------------------------------------------------------------------

tryCatch({
  snpset <- snpgdsLDpruning(input_vcf_gds_genofile,
                            sample.id = selected_sample_ids,
                            slide.max.bp = slide_max,
                            slide.max.n = slide_snp,
                            ld.threshold = ld_threshold,
                            autosome.only = FALSE)
  print(paste0(length(unlist(snpset)), " SNPs kept after LD pruning"))
}, error = function(e) {
  stop(paste("LD pruning failed:", e$message))
})

snpset.id <- unlist(snpset)

# Save info on the pruned SNPs
snplist <- snpgdsSNPList(input_vcf_gds_genofile)
snpset_df <- subset(snplist, snp.id %in% snpset.id)

snpset_file_name_txt <- paste0("snpset_", slide_max, "_", slide_snp, "_", ld_threshold, ".txt")
write.table(snpset_df,
            file = file.path(output_job_dir, snpset_file_name_txt),
            col.names = FALSE,
            row.names = FALSE,
            quote = FALSE,
            sep = "\t")

#--------------------------------------------------------------------------------
# PCA
#--------------------------------------------------------------------------------

tryCatch({
  pca <- snpgdsPCA(input_vcf_gds_genofile,
                   sample.id = selected_sample_ids,
                   num.thread = 40,
                   snp.id = snpset.id,
                   autosome.only = FALSE)
  print("PCA finished successfully.")
}, error = function(e) {
  stop(paste("PCA failed:", e$message))
})

# Show how much variance each PC explains (just the top 10 for now)
pc_percent <- pca$varprop * 100
print("Variance explained by PCs:")
print(round(pc_percent[1:min(10, length(pc_percent))], 2))

# Save PCA output and pruned SNPs
pca_results_file_name <- paste0("pca_results_", tools::file_path_sans_ext(basename(input_vcf), TRUE), "_", 
                                job_run_name_R, ".RData")
tryCatch({
  save(pca, snpset_df, file = file.path(output_job_dir, pca_results_file_name))
  print(paste0("Saved PCA results to: ", file.path(output_job_dir, pca_results_file_name)))
}, error = function(e) {
  stop(paste("Couldn't save PCA output:", e$message))
})

# Clean up
snpgdsClose(input_vcf_gds_genofile)

print("PCA run finished. Ready for visualization.")
print(paste0("All files saved in: ", output_job_dir))
